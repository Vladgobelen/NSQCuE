// File lib.rs
use napi_derive::napi;
use napi::{
    bindgen_prelude::*,
    threadsafe_function::{ThreadsafeFunction, ThreadsafeFunctionCallMode},
};
use std::sync::Mutex;
use std::thread;

// –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—ã–µ —á–∏—Å–ª–æ–≤—ã–µ –∫–æ–¥—ã –≤–º–µ—Å—Ç–æ –æ–±—ä–µ–∫—Ç–æ–≤
const MOUSE_DOWN: u32 = 1;
const MOUSE_UP: u32 = 2;
const KEY_DOWN: u32 = 3;
const KEY_UP: u32 = 4;

// ========================
// WINDOWS IMPLEMENTATION
// ========================
#[cfg(target_os = "windows")]
mod platform {
    use super::*;
    use windows::Win32::Foundation::{HINSTANCE, LPARAM, LRESULT, WPARAM, BOOL};
    use windows::Win32::UI::WindowsAndMessaging::*;
    use windows::Win32::System::LibraryLoader::GetModuleHandleW;
    use windows::Win32::System::Threading::GetCurrentThreadId;

    use std::ptr;
    use std::mem::MaybeUninit;

    // –ö–æ–ª–±–µ–∫–∏, —Ö—Ä–∞–Ω–∏–º—ã–µ –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ hook-–ø—Ä–æ—Ü–µ–¥—É—Ä:
    // MOUSE_CALLBACK –∏ KEYBOARD_CALLBACK ‚Äî —ç—Ç–æ ThreadsafeFunction, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º—ã–µ –∏–∑ JS/Node.
    static MOUSE_CALLBACK: Mutex<Option<ThreadsafeFunction<(u32, u32)>>> = Mutex::new(None);
    static KEYBOARD_CALLBACK: Mutex<Option<ThreadsafeFunction<(u32, u32)>>> = Mutex::new(None);

    // –•–µ–Ω–¥–ª—ã —Ö—É–∫–æ–≤ –∏ id –ø–æ—Ç–æ–∫–æ–≤, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ö—É–∫–∏:
    static MOUSE_HHOOK: Mutex<Option<HHOOK>> = Mutex::new(None);
    static KEY_HHOOK: Mutex<Option<HHOOK>> = Mutex::new(None);
    static MOUSE_THREAD_ID: Mutex<Option<u32>> = Mutex::new(None);
    static KEY_THREAD_ID: Mutex<Option<u32>> = Mutex::new(None);
    static MOUSE_THREAD_RUNNING: Mutex<bool> = Mutex::new(false);
    static KEY_THREAD_RUNNING: Mutex<bool> = Mutex::new(false);

    // ======================================================================
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∏–∑–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã—Ö —Ö—É–∫–æ–≤ (LL). –û–Ω–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–º–∏ –∏
    // –±–µ–∑–æ–ø–∞—Å–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å ThreadsafeFunction (—á–µ—Ä–µ–∑ Mutex).
    // ======================================================================

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º—ã—à–∏ (low-level)
    unsafe extern "system" fn mouse_proc(n_code: i32, w_param: WPARAM, l_param: LPARAM) -> LRESULT {
        // n_code < 0 –Ω—É–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–¥–∞—Ç—å –¥–∞–ª—å—à–µ
        if n_code >= 0 {
            // l_param —É WH_MOUSE_LL —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—É MSLLHOOKSTRUCT
            let hook_struct = &*(l_param.0 as *const MSLLHOOKSTRUCT);

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∏ —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è –ø–æ w_param
            let msg = w_param.0 as u32;
            let (button_code, event_type) = match msg {
                WM_LBUTTONDOWN => (1u32, MOUSE_DOWN),
                WM_LBUTTONUP => (1u32, MOUSE_UP),
                WM_RBUTTONDOWN => (2u32, MOUSE_DOWN),
                WM_RBUTTONUP => (2u32, MOUSE_UP),
                WM_MBUTTONDOWN => (3u32, MOUSE_DOWN),
                WM_MBUTTONUP => (3u32, MOUSE_UP),
                WM_XBUTTONDOWN | WM_XBUTTONUP => {
                    // –í —Å—Ç–∞—Ä–æ–º –∫–æ–¥–µ –±—ã–ª–æ —Å–º–µ—à–µ–Ω–∏–µ —Ç–∏–ø–æ–≤. –ó–¥–µ—Å—å –∞–∫–∫—É—Ä–∞—Ç–Ω–æ –±–µ—Ä—ë–º —Å—Ç–∞—Ä—à–µ–µ —Å–ª–æ–≤–æ mouseData.
                    let mouse_data: u32 = hook_struct.mouseData;
                    let xbutton = ((mouse_data >> 16) & 0xffff) as u16;
                    let button = if xbutton == 1 { 4u32 } else { 5u32 };
                    let event = if msg == WM_XBUTTONDOWN { MOUSE_DOWN } else { MOUSE_UP };
                    (button, event)
                }
                _ => {
                    // –ù–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–µ –Ω–∞—Å —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–∞–ª—å—à–µ
                    return CallNextHookEx(HHOOK::default(), n_code, w_param, l_param);
                }
            };

            // –í—ã–∑—ã–≤–∞–µ–º JS-–∫–æ–ª–±–µ–∫ –µ—Å–ª–∏ –æ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
            if let Ok(callback_guard) = MOUSE_CALLBACK.lock() {
                if let Some(ref callback) = *callback_guard {
                    // –ù–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏–π –≤—ã–∑–æ–≤ ‚Äî –µ—Å–ª–∏ –æ—á–µ—Ä–µ–¥—å –∑–∞–Ω—è—Ç–∞, —Å–æ–±—ã—Ç–∏–µ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è
                    let _ = callback.call(Ok((button_code, event_type)), ThreadsafeFunctionCallMode::NonBlocking);
                }
            }
        }

        // –ü–µ—Ä–µ–¥–∞—ë–º –¥–∞–ª—å—à–µ
        CallNextHookEx(HHOOK::default(), n_code, w_param, l_param)
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã (low-level)
    unsafe extern "system" fn keyboard_proc(n_code: i32, w_param: WPARAM, l_param: LPARAM) -> LRESULT {
        if n_code >= 0 {
            let hook_struct = &*(l_param.0 as *const KBDLLHOOKSTRUCT);
            let vk_code = hook_struct.vkCode as u32;

            // –ü—Ä–æ—Å—Ç–æ–π –≤—ã–±–æ—Ä: KEY_DOWN –¥–ª—è WM_KEYDOWN/WM_SYSKEYDOWN, –∏–Ω–∞—á–µ KEY_UP
            let msg = w_param.0 as u32;
            let event_type = if msg == WM_KEYDOWN || msg == WM_SYSKEYDOWN {
                KEY_DOWN
            } else {
                KEY_UP
            };

            // –í—ã–∑—ã–≤–∞–µ–º JS-–∫–æ–ª–±–µ–∫ –µ—Å–ª–∏ –æ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
            if let Ok(callback_guard) = KEYBOARD_CALLBACK.lock() {
                if let Some(ref callback) = *callback_guard {
                    let _ = callback.call(Ok((vk_code, event_type)), ThreadsafeFunctionCallMode::NonBlocking);
                }
            }
        }

        CallNextHookEx(HHOOK::default(), n_code, w_param, l_param)
    }

    // ======================================================================
    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∑–∞–ø—É—Å–∫–∞/–æ—Å—Ç–∞–Ω–æ–≤–∞ —Ö—É–∫–æ–≤ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø–æ—Ç–æ–∫–∞—Ö
    // ======================================================================

    // –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ—Ç–æ–∫ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç WH_MOUSE_LL –≤ —ç—Ç–æ–º –ø–æ—Ç–æ–∫–µ. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç Ok(()) —Å—Ä–∞–∑—É,
    // —Ä–µ–∞–ª—å–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ö—É–∫–æ–≤ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤–Ω—É—Ç—Ä–∏ –ø–æ—Ç–æ–∫–∞. –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –≤ –ø–æ—Ç–æ–∫–µ.
    #[napi]
    pub fn start_global_mouse_hook(callback: ThreadsafeFunction<(u32, u32)>) -> Result<()> {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ª–±–µ–∫ –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
        *MOUSE_CALLBACK.lock().unwrap() = Some(callback);

        // –ï—Å–ª–∏ –ø–æ—Ç–æ–∫ —É–∂–µ –∑–∞–ø—É—â–µ–Ω ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
        if *MOUSE_THREAD_RUNNING.lock().unwrap() {
            // –£–∂–µ –∑–∞–ø—É—â–µ–Ω–æ
            return Ok(());
        }

        *MOUSE_THREAD_RUNNING.lock().unwrap() = true;

        // –°–æ–∑–¥–∞—ë–º –ø–æ—Ç–æ–∫, –≤–Ω—É—Ç—Ä–∏ –∫–æ—Ç–æ—Ä–æ–≥–æ:
        // 1) –ø–æ–ª—É—á–∞–µ–º module handle
        // 2) –≤—ã–∑—ã–≤–∞–µ–º SetWindowsHookExW(WH_MOUSE_LL, ...)
        // 3) –∑–∞–ø—É—Å–∫–∞–µ–º —Ü–∏–∫–ª —Å–æ–æ–±—â–µ–Ω–∏–π GetMessage -> Translate/Dispatch
        thread::spawn(|| {
            unsafe {
                // –ü–æ–ª—É—á–∞–µ–º id —Ç–µ–∫—É—â–µ–≥–æ –ø–æ—Ç–æ–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –ø–æ—Å–ª–∞—Ç—å WM_QUIT
                let tid = GetCurrentThreadId();
                {
                    let mut guard = MOUSE_THREAD_ID.lock().unwrap();
                    *guard = Some(tid);
                }

                // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å handle –º–æ–¥—É–ª—è (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ)
                let hmodule = GetModuleHandleW(None).unwrap_or(HINSTANCE::default());

                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ö—É–∫
                match SetWindowsHookExW(WH_MOUSE_LL, Some(mouse_proc), hmodule, 0) {
                    Ok(hhook) => {
                        // –°–æ—Ö—Ä–∞–Ω—è–µ–º HHOOK
                        {
                            let mut hh = MOUSE_HHOOK.lock().unwrap();
                            *hh = Some(hhook);
                        }
                        // –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞ —Ä—É—Å—Å–∫–æ–º
                        println!("[RUST-WINDOWS] üñ± –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ö—É–∫ –º—ã—à–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–æ—Ç–æ–∫–µ {}.", tid);
                    }
                    Err(e) => {
                        eprintln!("[RUST-WINDOWS] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ö—É–∫ –º—ã—à–∏: {:?}", e);
                        // –î–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ, –æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Ç–æ–∫ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —á–µ—Ä–µ–∑ stop
                    }
                }

                // –¶–∏–∫–ª —Å–æ–æ–±—â–µ–Ω–∏–π ‚Äî –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Ö—É–∫–æ–≤
                let mut msg = MaybeUninit::<MSG>::uninit();
                while GetMessageW(msg.as_mut_ptr(), None, 0, 0).0 > 0 {
                    let msg = msg.assume_init();
                    TranslateMessage(&msg);
                    DispatchMessageW(&msg);
                }

                // –ü—Ä–∏ –≤—ã—Ö–æ–¥–µ ‚Äî —Å–Ω–∏–º–∞–µ–º —Ö—É–∫, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
                if let Some(hhook) = MOUSE_HHOOK.lock().unwrap().take() {
                    let _ = UnhookWindowsHookEx(hhook);
                    println!("[RUST-WINDOWS] üì¥ –•—É–∫ –º—ã—à–∏ —Å–Ω—è—Ç (–ø–æ—Ç–æ–∫ {}).", tid);
                }

                // –ü–æ–º–µ—á–∞–µ–º –ø–æ—Ç–æ–∫ –∫–∞–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π
                *MOUSE_THREAD_RUNNING.lock().unwrap() = false;
                *MOUSE_THREAD_ID.lock().unwrap() = None;
            }
        });

        Ok(())
    }

    // –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ—Ç–æ–∫ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç WH_KEYBOARD_LL –≤ —ç—Ç–æ–º –ø–æ—Ç–æ–∫–µ.
    #[napi]
    pub fn start_global_keyboard_hook(callback: ThreadsafeFunction<(u32, u32)>) -> Result<()> {
        *KEYBOARD_CALLBACK.lock().unwrap() = Some(callback);

        if *KEY_THREAD_RUNNING.lock().unwrap() {
            return Ok(());
        }

        *KEY_THREAD_RUNNING.lock().unwrap() = true;

        thread::spawn(|| {
            unsafe {
                let tid = GetCurrentThreadId();
                {
                    let mut guard = KEY_THREAD_ID.lock().unwrap();
                    *guard = Some(tid);
                }

                let hmodule = GetModuleHandleW(None).unwrap_or(HINSTANCE::default());

                match SetWindowsHookExW(WH_KEYBOARD_LL, Some(keyboard_proc), hmodule, 0) {
                    Ok(hhook) => {
                        {
                            let mut hh = KEY_HHOOK.lock().unwrap();
                            *hh = Some(hhook);
                        }
                        println!("[RUST-WINDOWS] ‚å® –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ö—É–∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–æ—Ç–æ–∫–µ {}.", tid);
                    }
                    Err(e) => {
                        eprintln!("[RUST-WINDOWS] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ö—É–∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: {:?}", e);
                    }
                }

                let mut msg = MaybeUninit::<MSG>::uninit();
                while GetMessageW(msg.as_mut_ptr(), None, 0, 0).0 > 0 {
                    let msg = msg.assume_init();
                    TranslateMessage(&msg);
                    DispatchMessageW(&msg);
                }

                if let Some(hhook) = KEY_HHOOK.lock().unwrap().take() {
                    let _ = UnhookWindowsHookEx(hhook);
                    println!("[RUST-WINDOWS] üì¥ –•—É–∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å–Ω—è—Ç (–ø–æ—Ç–æ–∫ {}).", tid);
                }

                *KEY_THREAD_RUNNING.lock().unwrap() = false;
                *KEY_THREAD_ID.lock().unwrap() = None;
            }
        });

        Ok(())
    }

    // –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ö—É–∫ –º—ã—à–∏: —É–¥–∞–ª—è–µ–º –∫–æ–ª–±–µ–∫ –∏ –ø–æ—Å—ã–ª–∞–µ–º WM_QUIT –≤ –ø–æ—Ç–æ–∫, –≥–¥–µ –≤–∏—Å–∏—Ç —Ü–∏–∫–ª —Å–æ–æ–±—â–µ–Ω–∏–π.
    #[napi]
    pub fn stop_global_mouse_hook() -> Result<()> {
        // –£–±–∏—Ä–∞–µ–º –∫–æ–ª–±–µ–∫
        *MOUSE_CALLBACK.lock().unwrap() = None;

        // –ï—Å–ª–∏ –ø–æ—Ç–æ–∫ –∑–∞–ø—É—â–µ–Ω ‚Äî –ø–æ—Å—ã–ª–∞–µ–º WM_QUIT –≤ –µ–≥–æ —Ü–∏–∫–ª —Å–æ–æ–±—â–µ–Ω–∏–π
        if let Some(tid) = *MOUSE_THREAD_ID.lock().unwrap() {
            unsafe {
                // PostThreadMessageW –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç BOOL; –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ –ø–æ—Ç–æ–∫ —É–∂–µ –∑–∞–≤–µ—Ä—à–∏–ª
                let _ = PostThreadMessageW(tid, WM_QUIT, WPARAM(0), LPARAM(0));
            }
            println!("[RUST-WINDOWS] üöß –ó–∞–ø—Ä–æ—à–µ–Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ö—É–∫–∞ –º—ã—à–∏ (–ø–æ—Å–ª–∞–Ω WM_QUIT –ø–æ—Ç–æ–∫—É {}).", tid);
        }

        Ok(())
    }

    // –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ö—É–∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ
    #[napi]
    pub fn stop_global_keyboard_hook() -> Result<()> {
        *KEYBOARD_CALLBACK.lock().unwrap() = None;

        if let Some(tid) = *KEY_THREAD_ID.lock().unwrap() {
            unsafe {
                let _ = PostThreadMessageW(tid, WM_QUIT, WPARAM(0), LPARAM(0));
            }
            println!("[RUST-WINDOWS] üöß –ó–∞–ø—Ä–æ—à–µ–Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ö—É–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã (–ø–æ—Å–ª–∞–Ω WM_QUIT –ø–æ—Ç–æ–∫—É {}).", tid);
        }

        Ok(())
    }

    // –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ —Ö—É–∫–∏
    #[napi]
    pub fn stop_all_hooks() -> Result<()> {
        *MOUSE_CALLBACK.lock().unwrap() = None;
        *KEYBOARD_CALLBACK.lock().unwrap() = None;

        if let Some(tid) = *MOUSE_THREAD_ID.lock().unwrap() {
            unsafe { let _ = PostThreadMessageW(tid, WM_QUIT, WPARAM(0), LPARAM(0)); }
            println!("[RUST-WINDOWS] üöß –ó–∞–ø—Ä–æ—à–µ–Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ö—É–∫–∞ –º—ã—à–∏ (–ø–æ—Å–ª–∞–Ω WM_QUIT –ø–æ—Ç–æ–∫—É {}).", tid);
        }
        if let Some(tid) = *KEY_THREAD_ID.lock().unwrap() {
            unsafe { let _ = PostThreadMessageW(tid, WM_QUIT, WPARAM(0), LPARAM(0)); }
            println!("[RUST-WINDOWS] üöß –ó–∞–ø—Ä–æ—à–µ–Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ö—É–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã (–ø–æ—Å–ª–∞–Ω WM_QUIT –ø–æ—Ç–æ–∫—É {}).", tid);
        }

        Ok(())
    }
}

// ========================
// LINUX IMPLEMENTATION - USING SIMPLE TYPES
// ========================
// <- –õ–∏–Ω—É–∫—Å–æ–≤—ã–π –º–æ–¥—É–ª—å –æ—Å—Ç–∞–≤–∏–ª –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –∫–∞–∫ –≤—ã –ø—Ä–æ—Å–∏–ª–∏ ->
#[cfg(target_os = "linux")]
mod platform {
    use super::*;
    use evdev::{Device, EventType, InputEvent};
    use std::fs::File;
    use std::sync::atomic::{AtomicBool, Ordering};
    use std::time::Duration;
    use lazy_static::lazy_static;

    lazy_static! {
        static ref MOUSE_CALLBACK: Mutex<Option<ThreadsafeFunction<(u32, u32)>>> = Mutex::new(None);
        static ref KEYBOARD_CALLBACK: Mutex<Option<ThreadsafeFunction<(u32, u32)>>> = Mutex::new(None);
        static ref RUNNING: AtomicBool = AtomicBool::new(false);
    }

    #[napi]
    pub fn start_global_mouse_hook(callback: ThreadsafeFunction<(u32, u32)>) -> Result<()> {
        println!("[RUST-LINUX] üöÄ Starting global mouse hook...");
        *MOUSE_CALLBACK.lock().unwrap() = Some(callback);
        RUNNING.store(true, Ordering::SeqCst);
        
        thread::spawn(move || {
            monitor_input_devices(true);
        });
        
        Ok(())
    }

    #[napi]
    pub fn start_global_keyboard_hook(callback: ThreadsafeFunction<(u32, u32)>) -> Result<()> {
        println!("[RUST-LINUX] üöÄ Starting global keyboard hook...");
        *KEYBOARD_CALLBACK.lock().unwrap() = Some(callback);
        RUNNING.store(true, Ordering::SeqCst);
        
        thread::spawn(move || {
            monitor_input_devices(false);
        });
        
        Ok(())
    }

    fn monitor_input_devices(is_mouse: bool) {
        let device_type = if is_mouse { "mouse" } else { "keyboard" };
        println!("[RUST-LINUX] üîç Scanning for {} devices...", device_type);
        
        while RUNNING.load(Ordering::SeqCst) {
            if let Ok(entries) = std::fs::read_dir("/dev/input") {
                for entry in entries.flatten() {
                    if !RUNNING.load(Ordering::SeqCst) {
                        return;
                    }
                    
                    let path = entry.path();
                    let path_str = path.to_string_lossy();
                    
                    if !path_str.contains("event") {
                        continue;
                    }

                    if let Ok(file) = File::open(&path) {
                        if let Ok(device) = Device::from_fd(file.into()) {
                            let is_target_device = if is_mouse {
                                is_mouse_device(&device)
                            } else {
                                is_keyboard_device(&device)
                            };

                            if is_target_device {
                                let device_name = device.name().unwrap_or("Unknown").to_string();
                                println!("[RUST-LINUX] üéØ Found {} device: {} ({})", device_type, device_name, path_str);
                                
                                if is_mouse {
                                    monitor_device_events(device, true, device_name);
                                } else {
                                    monitor_device_events(device, false, device_name);
                                }
                            }
                        }
                    }
                }
            }
            thread::sleep(Duration::from_millis(5000));
        }
    }

    fn monitor_device_events(mut device: Device, is_mouse: bool, device_name: String) {
        thread::spawn(move || {
            println!("[RUST-LINUX] üì° Starting event loop for: {}", device_name);
            
            while RUNNING.load(Ordering::SeqCst) {
                match device.fetch_events() {
                    Ok(events) => {
                        for event in events {
                            if is_mouse {
                                handle_mouse_event(event);
                            } else {
                                handle_keyboard_event(event);
                            }
                        }
                    }
                    Err(e) => {
                        println!("[RUST-LINUX] ‚ùå Error reading from device {}: {}", device_name, e);
                        break;
                    }
                }
            }
            println!("[RUST-LINUX] üì¥ Stopped monitoring: {}", device_name);
        });
    }

    fn handle_mouse_event(event: InputEvent) {
        if event.event_type() == EventType::KEY {
            if let Some(button_code) = evdev_key_to_mouse_button(event.code()) {
                let event_type = if event.value() == 1 { MOUSE_DOWN } else { MOUSE_UP };
                
                println!("[RUST-LINUX] üñ± Sending mouse event: button={}, type={}", button_code, event_type);
                
                if let Ok(callback_guard) = MOUSE_CALLBACK.lock() {
                    if let Some(ref callback) = *callback_guard {
                        let status = callback.call(Ok((button_code, event_type)), ThreadsafeFunctionCallMode::NonBlocking);
                        if status != Status::Ok {
                            eprintln!("[RUST-LINUX] ‚ùå Error calling mouse callback: {:?}", status);
                        } else {
                            println!("[RUST-LINUX] ‚úÖ Mouse event sent successfully");
                        }
                    }
                }
            }
        }
    }

    fn handle_keyboard_event(event: InputEvent) {
        if event.event_type() == EventType::KEY {
            // Skip mouse buttons and filter autorepeat (value == 2)
            if evdev_key_to_mouse_button(event.code()).is_none() && event.value() != 2 {
                let event_type = if event.value() == 1 { KEY_DOWN } else { KEY_UP };
                let key_code = event.code() as u32;
                
                println!("[RUST-LINUX] ‚å® Sending keyboard event: code={}, type={}", key_code, event_type);
                
                if let Ok(callback_guard) = KEYBOARD_CALLBACK.lock() {
                    if let Some(ref callback) = *callback_guard {
                        let status = callback.call(Ok((key_code, event_type)), ThreadsafeFunctionCallMode::NonBlocking);
                        if status != Status::Ok {
                            eprintln!("[RUST-LINUX] ‚ùå Error calling keyboard callback: {:?}", status);
                        } else {
                            println!("[RUST-LINUX] ‚úÖ Keyboard event sent successfully");
                        }
                    }
                }
            }
        }
    }

    fn is_mouse_device(device: &Device) -> bool {
        let has_relative = device.supported_events().contains(EventType::RELATIVE);
        let has_mouse_buttons = if let Some(keys) = device.supported_keys() {
            keys.iter().any(|code| {
                let code_val = code.code();
                code_val >= 0x110 && code_val <= 0x117 // Mouse buttons range
            })
        } else {
            false
        };
        
        has_relative || has_mouse_buttons
    }

    fn is_keyboard_device(device: &Device) -> bool {
        if !device.supported_events().contains(EventType::KEY) {
            return false;
        }
        
        if let Some(keys) = device.supported_keys() {
            let keyboard_key_count = keys.iter()
                .filter(|code| {
                    let code_val = code.code();
                    // Regular keyboard keys (1-255) excluding mouse buttons
                    (code_val >= 1 && code_val <= 255) && !(code_val >= 0x110 && code_val <= 0x117)
                })
                .count();
            keyboard_key_count > 20 // Require more keys to avoid false positives
        } else {
            false
        }
    }

    fn evdev_key_to_mouse_button(code: u16) -> Option<u32> {
        match code {
            0x110 => Some(1), // BTN_LEFT
            0x111 => Some(2), // BTN_RIGHT
            0x112 => Some(3), // BTN_MIDDLE
            0x113 => Some(4), // BTN_SIDE
            0x114 => Some(5), // BTN_EXTRA
            _ => None,
        }
    }

    #[napi]
    pub fn stop_global_mouse_hook() -> Result<()> {
        println!("[RUST-LINUX] üõë Stopping mouse hook...");
        RUNNING.store(false, Ordering::SeqCst);
        *MOUSE_CALLBACK.lock().unwrap() = None;
        Ok(())
    }

    #[napi]
    pub fn stop_global_keyboard_hook() -> Result<()> {
        println!("[RUST-LINUX] üõë Stopping keyboard hook...");
        RUNNING.store(false, Ordering::SeqCst);
        *KEYBOARD_CALLBACK.lock().unwrap() = None;
        Ok(())
    }

    #[napi]
    pub fn stop_all_hooks() -> Result<()> {
        println!("[RUST-LINUX] üõë Stopping all hooks...");
        RUNNING.store(false, Ordering::SeqCst);
        *MOUSE_CALLBACK.lock().unwrap() = None;
        *KEYBOARD_CALLBACK.lock().unwrap() = None;
        Ok(())
    }
}

// ========================
// CROSS-PLATFORM EXPORTS
// ========================
#[napi]
pub fn start_global_mouse_hook(callback: ThreadsafeFunction<(u32, u32)>) -> Result<()> {
    platform::start_global_mouse_hook(callback)
}

#[napi]
pub fn start_global_keyboard_hook(callback: ThreadsafeFunction<(u32, u32)>) -> Result<()> {
    platform::start_global_keyboard_hook(callback)
}

#[napi]
pub fn stop_global_mouse_hook() -> Result<()> {
    platform::stop_global_mouse_hook()
}

#[napi]
pub fn stop_global_keyboard_hook() -> Result<()> {
    platform::stop_global_keyboard_hook()
}

#[napi]
pub fn stop_all_hooks() -> Result<()> {
    platform::stop_all_hooks()
}

// –ö–æ–Ω–µ—Ü –ø—Ä–æ–≥—Ä–∞–º–º—ã
